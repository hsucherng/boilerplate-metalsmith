//-----------------------------------------------------------------------------
//  Functions
//-----------------------------------------------------------------------------

//---- Unit setters ----//

//
// Attach the `px` unit to a raw number
//
//      px(15) -► 15px
//
@function px($num) {
    @if $num == 0 {
        @return $num;
    }

    @return $num * 1px;
}

//
// Attach the `%` unit to a raw number
//
// Alternatively, pass in a second value to be used as the base for calculating
// the percentage.
//
//      perc(15) -► 15%
//      perc(4, 8) -► 50%
//
@function perc($num, $base: false) {
    @if $base != false {
        @return $num / $base * 100%;
    } @else if $num == 0 {
        @return $num;
    } @else {
        @return $num * 1%;
    }
}

//
// Attach the `vw` unit to a raw number
//
// Alternatively, pass in a second value to be used as the base for calculating
// the vw.
//
//      vw(15) -► 15vw
//      vw(4, 8) -► 50vw
//
@function vw($num, $base: false) {
    @if $base != false {
        @return $num / $base * 100vw;
    } @else if $num == 0 {
        @return $num;
    } @else {
        @return $num * 1vw;
    }
}

//
// Attach the `vh` unit to a raw number
//
// Alternatively, pass in a second value to be used as the base for calculating
// the vh.
//
//      vh(15) -► 15vh
//      vh(4, 8) -► 50vh
//
@function vh($num, $base: false) {
    @if $base != false {
        @return $num / $base * 100vh;
    } @else if $num == 0 {
        @return $num;
    } @else {
        @return $num * 1vh;
    }
}

//
// Attach the `em` unit to a raw number
//
// Alternatively, pass in a second value to be used as the base for calculating
// the em.
//
//      em(15) -► 15em
//      em(4, 8) -► 0.5em
//
@function em($num, $base: false) {
    @if $base != false {
        @return $num / $base * 1em;
    } @else if $num == 0 {
        @return $num;
    } @else {
        @return $num * 1em;
    }
}

//---- Map-list getters ----//

// Easings getter
@function ease($easing) {
    @if map-has-key($easings, $easing) {
        @return map-get($easings, $easing);
    } @else {
        @error 'No such easing `#{$easing}` in the $easings list.';
    }
}

//
//  Breakpoint getter
//
//  Assuming our variable is as below:
//
//      $media-queries: (
//          xs-dn: '(max-width: 480px)',
//          md-up: '(min-width: 801px)'
//      );
//
//  We can use the breakpoint function in the following ways:
//
//  - Simple keyword:
//
//      bp(xs-dn)
//      └►  (max-width: 480px)
//
//  - Multiple keywords:
//
//      bp(xs-dn, md-up)
//      └►  (max-width: 480px) and (min-width: 801px)
//
//  - Custom media query (which basically has no functionality):
//
//      bp('(max-height: 480px)')
//      └►  (max-height: 480px)
//
//  - Keywords with custom media query:
//
//      bp(xs-dn, '(max-height: 480px)')
//      └►  (max-width: 480px) and (max-height: 480px)
//
@function bp($breakpoints...) {
    $finalBreakpoint: '';

    @each $breakpoint in $breakpoints {
        @if $finalBreakpoint != '' {
            $finalBreakpoint: $finalBreakpoint + ' and ';
        }

        @if map-has-key($media-queries, $breakpoint) {
            $finalBreakpoint: $finalBreakpoint + map-get($media-queries, $breakpoint);
        } @else {
            $finalBreakpoint: $finalBreakpoint + $breakpoint;
        }
    }

    @return $finalBreakpoint;
}